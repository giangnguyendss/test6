Feature: Creation and Alteration of the 'Account' Table in purgo_playground Schema

  The system must create the 'Account' table in the 'purgo_playground' schema of the 'purgo_databricks' Unity Catalog, using specified columns and datatypes from patient_reg.xlsx, and add 4 new columns from patient_addition_field.xlsx. The process must drop the table if it already exists, enforce string length constraints, and ensure correct data types and nullability.

  Background:
    Given the following columns from patient_reg.xlsx must be included in the 'Account' table:
      | Column Name                        | Datatype | Length | Nullability |
      | Organization_Corporate_Parent__c   | STRING   | 255    | NULL        |
      | Organization_Level__c              | STRING   | 255    | NULL        |
      | Address__c                         | STRING   | 255    | NULL        |
      | Health_Industry_Number__c          | STRING   | 255    | NULL        |
      | Class_of_Trade_Facility_Type__c    | STRING   | 255    | NULL        |
      | Classification_type__c             | STRING   | 255    | NULL        |
      | Classification_sub_type__c         | STRING   | 255    | NULL        |
      | Contracted_340B__c                 | BOOLEAN  |        | NULL        |
    And the following columns from patient_addition_field.xlsx must be added:
      | Column Name                  | Datatype | Length | Nullability |
      | Operational_Status           | STRING   |        | NULL        |
      | Provider_Network_Type        | STRING   |        | NULL        |
      | Regulatory_Compliance_Code   | STRING   |        | NULL        |
      | Tax_Identification_Number    | STRING   |        | NULL        |
    And the table must be created as a managed table
    And no primary key, unique constraint, partitioning, clustering, or indexing is specified
    And all columns are nullable and have no default values

  Scenario: Drop and Create the 'Account' Table with Required Columns
    Given the 'purgo_playground.Account' table may already exist
    When the Databricks SQL code is executed
    Then the table 'purgo_playground.Account' must be dropped if it exists
    And the table 'purgo_playground.Account' must be created with the following schema:
      | Column Name                        | Datatype | Length | Nullability |
      | Organization_Corporate_Parent__c   | STRING   | 255    | NULL        |
      | Organization_Level__c              | STRING   | 255    | NULL        |
      | Address__c                         | STRING   | 255    | NULL        |
      | Health_Industry_Number__c          | STRING   | 255    | NULL        |
      | Class_of_Trade_Facility_Type__c    | STRING   | 255    | NULL        |
      | Classification_type__c             | STRING   | 255    | NULL        |
      | Classification_sub_type__c         | STRING   | 255    | NULL        |
      | Contracted_340B__c                 | BOOLEAN  |        | NULL        |
    And the table must be empty after creation

  Scenario: Add Four New Columns to the 'Account' Table
    Given the 'purgo_playground.Account' table exists with the initial columns
    When the Databricks SQL code to alter the table is executed
    Then the following columns must be added to the table:
      | Column Name                  | Datatype | Nullability |
      | Operational_Status           | STRING   | NULL        |
      | Provider_Network_Type        | STRING   | NULL        |
      | Regulatory_Compliance_Code   | STRING   | NULL        |
      | Tax_Identification_Number    | STRING   | NULL        |

  Scenario Outline: Validate Column Data Types and Lengths
    Given the 'purgo_playground.Account' table exists
    When the schema of the table is inspected
    Then the column "<Column Name>" must have datatype "<Datatype>"
    And if "<Length>" is specified, the column must enforce a maximum length of <Length> characters

    Examples:
      | Column Name                        | Datatype | Length |
      | Organization_Corporate_Parent__c   | STRING   | 255    |
      | Organization_Level__c              | STRING   | 255    |
      | Address__c                         | STRING   | 255    |
      | Health_Industry_Number__c          | STRING   | 255    |
      | Class_of_Trade_Facility_Type__c    | STRING   | 255    |
      | Classification_type__c             | STRING   | 255    |
      | Classification_sub_type__c         | STRING   | 255    |
      | Contracted_340B__c                 | BOOLEAN  |        |
      | Operational_Status                 | STRING   |        |
      | Provider_Network_Type              | STRING   |        |
      | Regulatory_Compliance_Code         | STRING   |        |
      | Tax_Identification_Number          | STRING   |        |

  Scenario Outline: Error Handling for Invalid Column Definitions
    Given the Databricks SQL code attempts to create or alter the 'Account' table
    When the column definition for "<Column Name>" is invalid due to "<Error Condition>"
    Then the system must return the error message "<Error Message>"

    Examples:
      | Column Name                  | Error Condition                        | Error Message                                                                 |
      | Organization_Corporate_Parent__c | Datatype not STRING                 | "Column 'Organization_Corporate_Parent__c' must be of type STRING."           |
      | Address__c                   | Length exceeds 255                    | "Column 'Address__c' exceeds maximum allowed length of 255 characters."       |
      | Contracted_340B__c           | Datatype not BOOLEAN                  | "Column 'Contracted_340B__c' must be of type BOOLEAN."                        |
      | Operational_Status           | Column already exists                 | "Column 'Operational_Status' already exists in table 'Account'."              |
      | Provider_Network_Type        | Invalid datatype specified             | "Invalid datatype for column 'Provider_Network_Type'."                        |

  Scenario: Error Handling for Table Creation Without Dropping Existing Table
    Given the 'purgo_playground.Account' table already exists
    When the Databricks SQL code attempts to create the table without dropping it first
    Then the system must return the error message "Table 'purgo_playground.Account' already exists."

  Scenario: Validate Table is Managed and Not External
    Given the 'purgo_playground.Account' table is created
    When the table properties are inspected
    Then the table must be a managed table
    And the table must not be external

  Scenario: Validate All Columns are Nullable and Have No Default Values
    Given the 'purgo_playground.Account' table is created
    When the schema is inspected
    Then all columns must allow NULL values
    And no column must have a default value specified
